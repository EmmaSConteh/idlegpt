{"prompt":"def multiply(a, b): return\n\n###\n\n","completion":" a * b\n\ndef square(n): return multiply(n, n)\n\ndef calculate_rectangle_area(width, height): return multiply(width, height) END"}
{"prompt":"def get_square_root(n): return\n\n###\n\n","completion":" math.sqrt(n)\n\ndef get_square_root(n): return math.sqrt(n)\n\ndef get_square_root(n): return math.sqrt(n) END"}
{"prompt":"def find_max(nums):\n    max_num = nums[0]\n     for num in nums:\n          if num > max_num:\n\n###\n\n","completion":"     max_num = num\n     return max_num END"}
{"prompt":"\n\n###\n\n","completion":" def hello():\n    print('Hello, world!')\n\nhello() END"}
{"prompt":"def calculate_sum(a, b):\n\n###\n\n","completion":" return a + b END"}
{"prompt":"for i in range(5):\n\n###\n\n","completion":" print(i) END"}
{"prompt":"class Circle:\n\n###\n\n","completion":" def init(self, radius): self.radius = radius END"}
{"prompt":"import pandas as pd\n\n# Read CSV file\n\n###\n\n","completion":" data = pd.read_csv('data.csv') END"}
{"prompt":"def factorial(n):\n if n == 0:\n\n###\n\n","completion":" return 1\n else:\n return n * factorial(n-1) END"}
{"prompt":"try:\n num = int(input('Enter a number: '))\n\n###\n\n","completion":" print('Square:', num ** 2)\nexcept ValueError:\n print('Invalid input') END"}
{"prompt":"def greet(name):\n print('Hello, ' + name + '!')\n\n###\n\n","completion":" \n\ngreet('John') END"}
{"prompt":"class Rectangle:\n def init(self, length, width):\n\n###\n\n","completion":" self.length = length\n self.width = width END"}
{"prompt":"import math\n\n# Calculate square root\n\n###\n\n","completion":" result = math.sqrt(25) END"}
{"prompt":"def power(base, exponent):\n result = 1\n for _ in range(exponent):\n\n###\n\n","completion":" result *= base\n return result END"}
{"prompt":"def is_palindrome(string):\n reversed_string = string[::-1]\n\n###\n\n","completion":" return string.lower() == reversed_string.lower() END"}
{"prompt":"import numpy as np\n\n# Create an array of zeros\n\n###\n\n","completion":" arr = np.zeros((3, 3)) END"}
{"prompt":"def print_elements(lst):\n for element in lst:\n\n###\n\n","completion":" print(element) END"}
{"prompt":"def convert_to_celsius(fahrenheit):\n return (fahrenheit - 32) * 5 \/ 9\n\n###\n\n","completion":" \n\ncelsius_temp = convert_to_celsius(75) END"}
{"prompt":"class BankAccount:\n def init(self, account_number):\n\n###\n\n","completion":" self.account_number = account_number\n self.balance = 0 END"}
{"prompt":"import random\n\n# Generate a random number between 1 and 10\n\n###\n\n","completion":" random_number = random.randint(1, 10) END"}
{"prompt":"def print_pattern(n):\n for i in range(n):\n\n###\n\n","completion":" print('*' * (i+1)) END"}
{"prompt":"def calculate_average(numbers):\n total = sum(numbers)\n\n###\n\n","completion":" return total \/ len(numbers) END"}
{"prompt":"import datetime\n\n# Get current date and time\n\n###\n\n","completion":" current_datetime = datetime.datetime.now() END"}
{"prompt":"def reverse_string(string):\n return string[::-1]\n\n###\n\n","completion":" \n\nreversed_str = reverse_string('Hello') END"}
{"prompt":"if condition:\n\n###\n\n","completion":" # Code to execute if condition is True END"}
{"prompt":"import numpy as np\n\n# Create an array\n\n###\n\n","completion":" arr = np.array([1, 2, 3]) END"}
{"prompt":"def print_even_numbers(n):\n for i in range(n):\n\n###\n\n","completion":" if i % 2 == 0:\n print(i) END"}
{"prompt":"class Student:\n def init(self, name, age):\n\n###\n\n","completion":" self.name = name\n self.age = age END"}
{"prompt":"import os\n\n# Get current working directory\n\n###\n\n","completion":" cwd = os.getcwd() END"}
{"prompt":"def multiply(a, b):\n return a * b\n\n###\n\n","completion":" \n\nresult = multiply(5, 3) END"}
{"prompt":"def is_prime(n):\n if n <= 1:\n\n###\n\n","completion":" return False\n for i in range(2, int(n**0.5) + 1): END"}
{"prompt":"import random\n\n# Generate a random float between 0 and 1\n\n###\n\n","completion":" random_number = random.random() END"}
{"prompt":"def print_pattern(n):\n for i in range(1, n+1):\n\n###\n\n","completion":" print('*' * i) END"}
{"prompt":"import datetime\n\n# Get current date\n\n###\n\n","completion":" current_date = datetime.date.today() END"}
{"prompt":"def reverse_list(lst):\n return lst[::-1]\n\n###\n\n","completion":" \n\nreversed_lst = reverse_list([1, 2, 3]) END"}
{"prompt":"def is_even(n):\n if n % 2 == 0:\n\n###\n\n","completion":" return True\n return False END"}
{"prompt":"import json\n\n# Convert Python dictionary to JSON\n\n###\n\n","completion":" data = {'name': 'John', 'age': 30}\njson_data = json.dumps(data) END"}
{"prompt":"def print_odd_numbers(n):\n for i in range(1, n+1):\n\n###\n\n","completion":" if i % 2 != 0:\n print(i) END"}
{"prompt":"def find_max(lst):\n max_val = lst[0]\n for num in lst:\n\n###\n\n","completion":" if num > max_val:\n max_val = num\n return max_val END"}
{"prompt":"import os\n\n# List files in a directory\n\n###\n\n","completion":" files = os.listdir('\/path\/to\/directory') END"}
{"prompt":"def is_vowel(letter):\n vowels = ['a', 'e', 'i', 'o', 'u']\n\n###\n\n","completion":" return letter.lower() in vowels END"}
{"prompt":"import csv\n\n# Write data to CSV file\n\n###\n\n","completion":" data = [['John', 25], ['Amy', 30]]\nwith open('data.csv', 'w', newline='') as file:\n writer = csv.writer(file)\n writer.writerows(data) END"}
{"prompt":"def count_words(string):\n words = string.split()\n\n###\n\n","completion":" return len(words) END"}
{"prompt":"import random\n\n# Shuffle a list\n\n###\n\n","completion":" lst = [1, 2, 3, 4, 5]\nrandom.shuffle(lst) END"}
{"prompt":"def print_fibonacci_sequence(n):\n sequence = [0, 1]\n\n###\n\n","completion":" while len(sequence) < n:\n next_num = sequence[-1] + sequence[-2]\n sequence.append(next_num)\n print(sequence) END"}
{"prompt":"import os\n\n# Check if a file exists\n\n###\n\n","completion":" file_exists = os.path.exists('\/path\/to\/file') END"}
{"prompt":"def find_min(lst):\n min_val = lst[0]\n for num in lst:\n\n###\n\n","completion":" if num < min_val:\n min_val = num\n return min_val END"}
{"prompt":"def add_numbers(a, b):\n return a + b\n\n###\n\n","completion":" \n\nresult = add_numbers(10, 20) END"}
{"prompt":"import numpy as np\n\n# Create a 2D array\n\n###\n\n","completion":" arr = np.array([[1, 2, 3], [4, 5, 6]]) END"}
{"prompt":"def print_multiplication_table(n):\n for i in range(1, 11):\n\n###\n\n","completion":" print(n, 'x', i, '=', n*i) END"}
{"prompt":"class Car:\n def init(self, make, model):\n\n###\n\n","completion":" self.make = make\n self.model = model END"}
{"prompt":"import random\n\n# Generate a random integer between 1 and 10\n\n###\n\n","completion":" random_number = random.randint(1, 10) END"}
{"prompt":"def print_pattern(n):\n for i in range(n, 0, -1):\n\n###\n\n","completion":" print('*' * i) END"}
{"prompt":"def calculate_product(numbers):\n product = 1\n for num in numbers:\n\n###\n\n","completion":" product *= num\n return product END"}
{"prompt":"import datetime\n\n# Get current time\n\n###\n\n","completion":" current_time = datetime.datetime.now().time() END"}
{"prompt":"def remove_duplicates(lst):\n return list(set(lst))\n\n###\n\n","completion":" \n\nunique_lst = remove_duplicates([1, 2, 2, 3, 3, 4]) END"}
{"prompt":"def is_palindrome(word):\n reversed_word = word[::-1]\n\n###\n\n","completion":" return word.lower() == reversed_word.lower() END"}
{"prompt":"import os\n\n# Rename a file\n\n###\n\n","completion":" os.rename('old_file.txt', 'new_file.txt') END"}
{"prompt":"def find_average(lst):\n total = sum(lst)\n average = total \/ len(lst)\n\n###\n\n","completion":" return average END"}
{"prompt":"def calculate_factorial(n):\n factorial = 1\n for i in range(1, n+1):\n\n###\n\n","completion":" factorial *= i\n return factorial END"}
{"prompt":"class Book:\n def init(self, title, author):\n\n###\n\n","completion":" self.title = title\n self.author = author END"}
{"prompt":"import math\n\n# Calculate the factorial of a number\n\n###\n\n","completion":" factorial = math.factorial(5) END"}
{"prompt":"def count_vowels(string):\n vowels = 'aeiou'\n\n###\n\n","completion":" count = 0\n for char in string:\n if char.lower() in vowels:\n count += 1\n return count END"}
{"prompt":"import os\n\n# Delete a file\n\n###\n\n","completion":" os.remove('file.txt') END"}
{"prompt":"def find_median(lst):\n sorted_lst = sorted(lst)\n\n###\n\n","completion":" n = len(sorted_lst)\n if n % 2 == 0:\n median = (sorted_lst[n\/\/2-1] + sorted_lst[n\/\/2]) \/ 2\n else:\n median = sorted_lst[n\/\/2]\n return median END"}
{"prompt":"def print_reverse_pattern(n):\n for i in range(n, 0, -1):\n\n###\n\n","completion":" print('*' * i) END"}
{"prompt":"def calculate_power(base, exponent):\n result = base ** exponent\n\n###\n\n","completion":" return result END"}
{"prompt":"import numpy as np\n\n# Reshape a 1D array into a 2D array\n\n###\n\n","completion":" arr = np.array([1, 2, 3, 4, 5, 6])\nreshaped_arr = arr.reshape(2, 3) END"}
{"prompt":"import os\n\n# Check if a directory exists\n\n###\n\n","completion":" dir_exists = os.path.isdir('\/path\/to\/directory') END"}
{"prompt":"class Triangle:\n def init(self, base, height):\n\n###\n\n","completion":" self.base = base\n self.height = height END"}
